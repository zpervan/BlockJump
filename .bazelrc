# Workaround for Bazel sync and proper intellisense on Linux
build --action_env=BAZEL_CXXOPTS="-std=c++17"

# Release build options
build --strip=always
build --compilation_mode=opt

# Build flavors
build:linux --client_env=CC="/usr/bin/clang"
build:linux --client_env=CXX="/usr/bin/clang++"
build:linux --cxxopt=-std=c++17
## @TODO: Temporary disabled due to imgui-SFML error
#build:linux --cxxopt=-Werror
build:linux --cxxopt=-Wpedantic

build:windows --client_env=CC="C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe"
build:windows --client_env=CXX="C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe"
build:windows --cxxopt=/std:c++17

build:windows-ci --client_env=CC="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.32.31326/bin/Hostx64/x64/cl.exe"
build:windows-ci --client_env=CXX="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.32.31326/bin/Hostx64/x64/cl.exe"
build:windows-ci --cxxopt=/std:c++17

# Debug build options
build:linux_debug --config=linux
build:linux_debug --compilation_mode=dbg
build:linux_debug --strip=never
build:linux_debug --cxxopt=-ggdb3
build:linux_debug --cxxopt=-O0

build:windows_debug --config=windows
build:windows_debug --compilation_mode=dbg

# Address sanitizer - Linux only!
build:san --config=linux_debug
build:san --cxxopt=-fsanitize=address
build:san --linkopt=-fsanitize=address
build:san --action_env=ASAN_OPTIONS=detect_leaks=1:color=always

# Test environment
test --test_env="GTEST_COLOR=1"
test --nocache_test_results
test --test_strategy=exclusive
